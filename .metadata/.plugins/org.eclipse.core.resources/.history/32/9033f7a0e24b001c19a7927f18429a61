package application;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import entities.Product;

public class ProductFunction {

	public static void productFunction1() {
		List<Product> list = new ArrayList<>(); 														//Lista original Lista de Produtos
		
		list.add(new Product("TV", 900.0));
		list.add(new Product("Mouse", 50.0));
		list.add(new Product("Tablet", 350.50));
		list.add(new Product("HD Case", 80.90));
		
		//                   list.stream().map(new util.ProductFuncion()) // converte para stream e aplica função aos elementos
		List<String> names = list.stream().map(new util.ProductFuncion()).collect(Collectors.toList()); // Lista final de Strings
		names.forEach(System.out :: println);
		
		
		
		
		
		
		
		//Notas:
		/*
		 * Interface funcional "FUNCTION": "Function" implementa uma função de 2
		 * elementos. Um objeto de entrada e um de saída ex. (Produto, String) Para
		 * aplicar uma função a varios elementos de uma list eu preciso converter da
		 * estrutura de dados List para a estrutura Stream. e para esse processo utilizo
		 * a função map: NAO CONFUNDIR com estrutura de dados Map a função "map" é uma
		 * função que aplica uma função a todos os elementos de uma stream; Conceito de
		 * stream: Uma sequencia de dados; A função map não funciona a partir de uma
		 * lista; funciona a partir de uma stream; precisa conversar uma lista em stream
		 * e depois de stream para list; ".stream()" converte para stream
		 * ".collect(Collectors.toList())" converte de stream para List
		 */
		
		}
	}
	
}
